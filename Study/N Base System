# N진법을 10진법으로
### 원리

N진수의 각 자리값은 해당 자리의 지수와 진수를 곱한 값으로 표현할 수 있어. 예를 들어, N진수에서 각 자리의 위치에 따라 가중치가 결정되는데, 이걸 아래와 같은 수식으로 나타낼 수 있어:

\[ N진수 \; \text{d}_k \text{d}_{k-1} \ldots \text{d}_1 \text{d}_0 \]

여기서 각 자리의 가중치는 N의 지수로 표현돼:

\[ d_k \times N^k + d_{k-1} \times N^{k-1} + \ldots + d_1 \times N^1 + d_0 \times N^0 \]

이 때 \( d \)는 각 자리의 숫자를 나타내고, \( k \)는 자리의 위치를 나타내 (가장 오른쪽 자리부터 0번째 위치).

### 예제: 2진수 1101을 10진수로 변환하기

1. **각 자리의 값을 확인하기**:
   - 1 (가장 왼쪽 자리, 2^3 위치)
   - 1 (2^2 위치)
   - 0 (2^1 위치)
   - 1 (2^0 위치)

2. **각 자리의 값을 해당 가중치에 곱하기**:
   - \( 1 \times 2^3 = 1 \times 8 = 8 \)
   - \( 1 \times 2^2 = 1 \times 4 = 4 \)
   - \( 0 \times 2^1 = 0 \times 2 = 0 \)
   - \( 1 \times 2^0 = 1 \times 1 = 1 \)

3. **모두 더하기**:
   - \( 8 + 4 + 0 + 1 = 13 \)

따라서 2진수 1101은 10진수로 13이 돼.

### 다양한 진수를 10진수로 변환하기 위한 Python 코드

이 원리를 Python 코드로 작성해보자. 이 코드는 주어진 진수를 10진수로 변환하는 과정을 자동으로 수행해줘.

```python
def base_to_decimal(number, base):
    number_str = str(number)
    length = len(number_str)
    decimal_value = 0
    for i in range(length):
        digit = int(number_str[length - 1 - i])
        decimal_value += digit * (base ** i)
    return decimal_value

# 예시
base_number = "1101"
base = 2
decimal_number = base_to_decimal(base_number, base)
print(decimal_number)  # 13
```

이 코드를 통해 주어진 진수 `base_number`를 10진수로 변환할 수 있어. 코드를 천천히 살펴보면서 각 부분이 어떻게 동작하는지 이해해보자:

1. `number_str = str(number)`: 입력된 숫자를 문자열로 변환해.
2. `length = len(number_str)`: 문자열의 길이를 구해.
3. `decimal_value = 0`: 10진수 결과를 저장할 변수를 초기화해.
4. `for i in range(length)`: 각 자리에 대해 반복문을 돌려.
5. `digit = int(number_str[length - 1 - i])`: 각 자리의 숫자를 구해.
6. `decimal_value += digit * (base ** i)`: 각 자리의 값을 해당 가중치와 곱해서 더해.

이런 식으로 다양한 진수를 10진수로 변환할 수 있어. 이해가 됐길 바래!

# 10진법을 N진법으로
### 원리

10진법 숫자를 N진법으로 변환하려면, 그 숫자를 N으로 나누고, 나머지를 구하는 과정을 반복하면 됨. 이 과정을 아래와 같이 설명할 수 있음:

1. **숫자를 N으로 나눔**: 숫자를 N으로 나누고, 나머지를 구함.
2. **몫을 계속 나눔**: 몫이 0이 될 때까지 계속해서 N으로 나누고, 나머지를 구함.
3. **나머지를 역순으로 나열함**: 구한 나머지들을 역순으로 나열하면, N진법으로 변환된 숫자가 됨.

### 예제: 10진수 255를 16진수로 변환하기

1. **255를 16으로 나눔**:
   - 255 ÷ 16 = 15, 나머지 15 (F)

2. **몫인 15를 16으로 나눔**:
   - 15 ÷ 16 = 0, 나머지 15 (F)

3. **나머지를 역순으로 나열함**:
   - 나머지: F, F
   - 16진법: FF

따라서 10진수 255는 16진수로 FF가 됨.

### 다양한 진수로 변환하기 위한 Java 코드

이 원리를 Java 코드로 작성해보겠음. 이 코드는 주어진 10진법 숫자를 N진법으로 변환하는 과정을 자동으로 수행해줌.

```java
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        String[] input = br.readLine().split(" ");

        long number = Long.parseLong(input[0]);
        int base = Integer.parseInt(input[1]);

        StringBuilder convertNumber = new StringBuilder();

        while (number >= base) {
            long remainder = number % base;
            if (remainder > 9) {
                convertNumber.append((char) (remainder + 55));
            } else {
                convertNumber.append(remainder);
            }
            number = number / base;
        }
        long remainder = number % base;
        if (remainder > 9) {
            convertNumber.append((char) (remainder + 55));
        } else {
            convertNumber.append(remainder);
        }

        System.out.println(convertNumber.reverse());
    }
}
```

이 코드를 통해 주어진 10진법 숫자를 N진법으로 변환할 수 있음. 코드를 천천히 살펴보면서 각 부분이 어떻게 동작하는지 이해해보겠음:

1. `BufferedReader br = new BufferedReader(new InputStreamReader(System.in))`: 입력을 받기 위한 BufferedReader를 생성함.
2. `String[] input = br.readLine().split(" ")`: 입력된 문자열을 공백을 기준으로 나눔.
3. `long number = Long.parseLong(input[0])`: 첫 번째 입력을 10진법 숫자로 변환함.
4. `int base = Integer.parseInt(input[1])`: 두 번째 입력을 진법으로 변환함.
5. `StringBuilder convertNumber = new StringBuilder()`: 변환된 숫자를 저장할 StringBuilder를 생성함.
6. `while (number >= base)`: 숫자가 진법보다 크거나 같을 때까지 반복함.
7. `long remainder = number % base`: 나머지를 구함.
8. `convertNumber.append(remainder > 9 ? (char) (remainder + 55) : remainder)`: 나머지가 9보다 크면 문자로 변환하고, 아니면 숫자를 추가함.
9. `number = number / base`: 숫자를 진법으로 나눔.
10. `System.out.println(convertNumber.reverse())`: 변환된 숫자를 역순으로 출력함.
